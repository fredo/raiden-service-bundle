version: '2.3'

# versions: change these in order to pin versions for a certain releases
x-versions:
  services: &IMAGE_RAIDEN_SERVICES_VERSION
    image: raidennetwork/raiden-services:stable
  db: &IMAGE_DB_VERSION
    image: raidennetwork/raiden-services-bundle:2019.11.1-db
  synapse: &IMAGE_SYNAPSE_VERSION
    image: raidennetwork/raiden-services-bundle:nightly-synapse
  well-known-server: &IMAGE_WELL_KNOWN_VERSION
    image: raidennetwork/raiden-services-bundle:2019.11.1-well_known_server
  room_ensurer: &IMAGE_ROOM_ENSURER_VERSION
    image: raidennetwork/raiden-services-bundle:nightly-room_ensurer
  traefik: &IMAGE_TRAEFIK_VERSION
    image: traefik:2.1
  purger: &IMAGE_PURGER_VERSION
    image: raidennetwork/raiden-services-bundle:nightly-purger
# /versions

x-defaults: &services-defaults
  <<: *IMAGE_RAIDEN_SERVICES_VERSION
  env_file: .env
  volumes:
    - ${DATA_DIR:-./data}/state:/state
    - ${DATA_DIR:-./data}/keystore:/keystore

services:
# raiden-transport containers
  synapse:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/well-known:/data_well_known
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
      - URL_KNOWN_FEDERATION_SERVERS
    command: ["/synapse-venv/bin/python", "-m", "synapse.app.homeserver", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/homeserver.yaml"]
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.synapse.rule=Host(`${SERVER_NAME}`)"
      - "traefik.http.routers.synapse.tls=true"
      - "traefik.http.routers.synapse.tls.certresolver=le"
      - "traefik.http.routers.synapse.service=synapse"
      - "traefik.http.services.synapse.loadbalancer.server.port=8008"
      - "traefik.http.services.synapse.loadbalancer.healthcheck.path=/_matrix/client/versions"
      - "traefik.http.routers.metrics.rule=Host(`metrics.${SERVER_NAME}`)"
      - "traefik.http.routers.metrics.tls=true"
      - "traefik.http.routers.metrics.tls.certresolver=le"
      - "traefik.http.routers.metrics.middlewares=metrics-access-control@docker"
      - "traefik.http.routers.metrics.service=metrics"
      - "traefik.http.services.metrics.loadbalancer.server.port=9101"
      - "traefik.http.middlewares.metrics-access-control.ipwhitelist.sourcerange=${CIDR_ALLOW_METRICS}"
      - "purge_restart_container=true"

  synchrotron:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.synchrotron", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/synchrotron.yaml"]
    healthcheck:
      disable: true
    scale: ${WORKER_COUNT:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.synchrotron.rule=Host(`${SERVER_NAME}`) && (PathPrefix(`/_matrix/client/{version:(v2_alpha|r0)}/sync`) || PathPrefix(`/_matrix/client/{version:(api/v1|v2_alpha|r0)}/events`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0)}/initialSync`) && PathPrefix(`/_matrix/client/{version:(api/v1|r0)}/rooms/{room:[^/]+}/initialSync`))"
      - "traefik.http.routers.synchrotron.tls=true"
      - "traefik.http.routers.synchrotron.tls.certresolver=le"
      - "traefik.http.routers.synchrotron.service=synchrotron"
      - "traefik.http.services.synchrotron.loadbalancer.server.port=8008"
      - "traefik.http.services.synchrotron.loadbalancer.sticky=true"

  federation_reader:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.federation_reader", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/federation_reader.yaml"]
    healthcheck:
      disable: true
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host(`${SERVER_NAME}`) && (PathPrefix(`/_matrix/federation/v1/{type:(backfill|event|event_auth|exchange_third_party_invite|get_missing_events|invite|make_join|make_leave|publicRoom|query|query_auth|send|send_join|send_leave|state|state_ids)}`) || PathPrefix(`/_matrix/federation/v2/{type:(invite|send_join|send_leave)}`) || PathPrefix(`/_matrix/key/v2/query`))"
      - "traefik.http.routers.federation_reader.tls=true"
      - "traefik.http.routers.federation_reader.tls.certresolver=le"
      - "traefik.http.routers.federation_reader.service=federation_reader"
      - "traefik.http.services.federation_reader.loadbalancer.server.port=8008"

  federation_sender:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.federation_sender", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/federation_sender.yaml"]
    healthcheck:
      disable: true

  client_reader:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.client_reader", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/client_reader.yaml"]
    scale: ${WORKER_COUNT:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host(`${SERVER_NAME}`) && (PathPrefix(`/_matrix/client/versions`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/publicRooms`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/joined_members`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/context/{context:.*}`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/members`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/state`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/account/3pid`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/keys/query`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/keys/changes`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/voip/turnServer`))"
      - "traefik.http.routers.client_reader.tls=true"
      - "traefik.http.routers.client_reader.tls.certresolver=le"
      - "traefik.http.routers.client_reader.service=client_reader"
      - "traefik.http.services.client_reader.loadbalancer.server.port=8008"
      - "traefik.http.services.client_reader.loadbalancer.sticky=true"

  user_dir:
    << : *IMAGE_SYNAPSE_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.user_dir", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/user_dir.yaml"]
    healthcheck:
      disable: true
    scale: ${WORKER_COUNT:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host(`${SERVER_NAME}`) && PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/user_directory/search`)"
      - "traefik.http.routers.user_dir.tls=true"
      - "traefik.http.routers.user_dir.tls.certresolver=le"
      - "traefik.http.routers.user_dir.service=user_dir"
      - "traefik.http.services.user_dir.loadbalancer.server.port=8008"
      - "traefik.http.services.user_dir.loadbalancer.sticky=true"

  event_creator:
    image: raidennetwork/raiden-services-bundle:nightly-synapse
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.event_creator", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/event_creator.yaml"]
    healthcheck:
      disable: true
    scale: ${WORKER_COUNT:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host(`${SERVER_NAME}`) && (PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/send`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/{action:(join|invite|leave|ban|unban|kick)}`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/join/`) || PathPrefix(`/_matrix/client/{version:(api/v1|r0|unstable)}/profile/`))"
      - "traefik.http.routers.event_creator.tls=true"
      - "traefik.http.routers.event_creator.tls.certresolver=le"
      - "traefik.http.routers.event_creator.service=event_creator"
      - "traefik.http.services.event_creator.loadbalancer.server.port=8008"
      - "traefik.http.services.event_creator.loadbalancer.sticky=true"


  db:
    << : *IMAGE_DB_VERSION
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/db:/var/lib/postgresql/data
    healthcheck:
      test: echo 'select 1' | psql -U postgres > /dev/null || exit 1

  # Serves the .well-known/matrix/server file
  well_known_server:
    << : *IMAGE_WELL_KNOWN_VERSION
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/well-known:/data
    depends_on:
      synapse:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.well-known.rule=Host(`${SERVER_NAME}`) && PathPrefix(`/.well-known/matrix`)"
      - "traefik.http.routers.well-known.entrypoints=websecure"
      - "traefik.http.routers.well-known.tls=true"
      - "traefik.http.routers.well-known.tls.certresolver=le"

  room_ensurer:
    << : *IMAGE_ROOM_ENSURER_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
    depends_on:
      synapse:
        condition: service_healthy
    environment:
      - SERVER_NAME
      - URL_KNOWN_FEDERATION_SERVERS
    command:
      - "--own-server"
      - "${SERVER_NAME}"
      - "--log-level"
      - "DEBUG"
      - "--credentials-file"
      - "/config/admin_user_cred.json"

  purger:
    << : *IMAGE_PURGER_VERSION
    restart: always
    volumes:
      - ./config/synapse:/config
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    depends_on:
      synapse:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - PURGE_SLEEP_UNTIL=05:00:00
    command:
      - "postgres://postgres@db:5432/synapse"
      - "http://synapse:8008"
      - "--docker-restart-label"
      - "purge_restart_container"
      - "--keep-newer"
      - "15"
      - "--keep-min-msgs"
      - "3000"
      - "--credentials-file"
      - "/config/admin_user_cred.json"
# common traefik
  traefik:
    << : *IMAGE_TRAEFIK_VERSION
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/traefik:/etc/traefik
      - ${DATA_DIR:-./data}/traefik:/data
      - /var/run/docker.sock:/var/run/docker.sock
    command: --certificatesResolvers.le.acme.email=${LETSENCRYPT_EMAIL}
    healthcheck:
      disable: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`proxy.${SERVER_NAME}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=traefik-access-control@docker"
      - "traefik.http.routers.traefik-metrics.rule=Host(`proxy.${SERVER_NAME}`) && PathPrefix(`/metrics`)"
      - "traefik.http.routers.traefik-metrics.tls=true"
      - "traefik.http.routers.traefik-metrics.tls.certresolver=le"
      - "traefik.http.routers.traefik-metrics.service=prometheus@internal"
      - "traefik.http.routers.traefik-metrics.entrypoints=websecure"
      - "traefik.http.routers.traefik-metrics.middlewares=traefik-access-control@docker"
      - "traefik.http.middlewares.traefik-access-control.ipwhitelist.sourcerange=${CIDR_ALLOW_METRICS}"
